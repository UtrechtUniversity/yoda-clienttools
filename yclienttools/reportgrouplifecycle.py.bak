'''Generates a list of groups, along with their creation date, expiration date (if available),
   as well as whether the research and vault compartment contain any collections or data objects .'''

import argparse
import csv
import sys

from irods.column import Like
from irods.message import (XML_Parser_Type, ET)
from irods.models import Collection, DataObject, Group, User
from yclienttools import common_args, common_config, common_queries
from yclienttools import session as s


def entry():
    '''Entry point'''
    try:
        args = _get_args()
        session = s.setup_session(yoda_version)
        ET( XML_Parser_Type.QUASI_XML, session.server_version )
        report_groups_lifecycle(args, session)
        session.cleanup()

    except KeyboardInterrupt:
        print("Script interrupted by user.\n", file=sys.stderr)


def _get_args():
    '''Parse command line arguments'''
    parser = argparse.ArgumentParser(description=__doc__)
    common_args.add_default_args(parser)
    return parser.parse_args()


def _get_group_attributes(session, group_name):
    """Retrieves a dictionary of attribute-values of group metadata.
       This assumes attribute names are unique.
    """
    result = dict()
    group_objects = session.query(User).filter(
        User.name == group_name).filter(
        User.type == "rodsgroup")

    if len(group_objects) > 0:
        for metadata in group_objects.metadata.items():
            result[metadata.attribute] = metadata.value

    return result


def _group_research_has_data(session, group_name):
    """Returns boolean that indicates whether the research compartment of
       the group has any data (i.e. data objects or subcollections).
       if the group has no research department, None is returned.
    """
    research_collection = f"/{session.zone}/home/{group}"
    return _collection_has_data(research_collection)


def _group_vault_has_data(session, group_name):
    """Returns boolean that indicates whether the vault compartment of
       the group has any data (i.e. data objects or subcollections).
       If the group has no vault compartment, None is returned.
    """
    vault_collection = f"/{session.zone}/home/{group}".replace(
        "research-", "vault-", 1)
    return _collection_has_data(vault_collection)


def _collection_has_data(session, coll_name):
    root_data_objects = session.query(Collection, DataObject).filter(
        DataObject.collection_id == Collection.id).filter(
        Collection.name == coll_name)
    root_data_collections = session.query(DataObject).filter(
        DataObject.collection == home_collection)
    sub_data_objects = session.query(Collection, DataObject).filter(
        DataObject.collection_id == Collection.id).filter(
        Like(Collection.name, coll_name + "/%"))
    sub_data_collections = session.query(Collection).filter(
        Like(Collection.name, coll_name + "/%"))
    return len(root_data_objects + root_data_collections +
               sub_data_objects + sub_data_collections)


def _get_group_creation_date(session, group_name):
    create_times = session.query(
        User.create_time).filter(
        User.name == group_name)
    return create_times[0] if len(create_times) else None


def _get_research_groups_list(session):
    groups = session.query(User).filter(User.type == 'rodsgroup')
    return [x[User.name]
            for x in groups if x[User.name].startswith("research-")]


def report_groups_lifecycle(args, session):
    output = csv.writer(sys.stdout, delimiter=',')
    output.writerow(["Group name", "Category", "Subcategory", "Creation date", "Expiration date",
                     "Has research data", "Has vault data"])

    def _has_data_to_string(value):
        if value is None:
            return "N/A"
        else:
            return "yes" if value else "no"

    for group in _get_research_groups_list(session):
        attributes = _get_group_attributes(session, group)
        category = attributes.get("category", "no category")
        subcategory = attributes.get("subcategory", "no subcategory")
        creation_date = _get_group_creation_date(session, group)
        expiration_date = attributes.get("expiration_date", "N/A")
        research_has_data = _has_data_to_string(
            _group_research_has_data(session, group))
        vault_has_data = _has_data_to_string(
            _group_vault_has_data(session, group))
        output.writerow([group, category, subcategory, creation_date, expiration_date,
                         research_has_data, vault_has_data])
